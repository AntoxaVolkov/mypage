'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

document.addEventListener('DOMContentLoaded', init);

function init() {
    var canvas = document.getElementById('videoPlay');
    var video = document.getElementById('video');
    var videoTime = document.querySelector('.video__time');
    var videoCont = document.querySelector('.video');
    var btnNav = document.querySelector('.header__btn-nav');
    var header = document.querySelector('.header');
    var nav = document.querySelector('.nav');
    var loaded = 0,
        timerId = void 0;

    ;(function (doc, win) {
        var Slider = function () {
            function Slider(el, options) {
                _classCallCheck(this, Slider);

                this.options = {
                    classNameList: '.slider__list',
                    classNameSlide: '.slider__item',
                    classNameSlideActive: '.slider__item--active',
                    classNamePrev: '.slider__left-arrow',
                    classNameNext: '.slider__right-arrow',
                    classNameNav: '.slider__nav',
                    classNameNavItem: '.slider__nav-item',
                    classNameNavLink: '.slider__nav-link',
                    classNameNavItemActive: '.slider__nav-item--actived'
                };

                this.el = el;
                this.currentSlide = 0;

                this._init();
            }

            _createClass(Slider, [{
                key: '_init',
                value: function _init() {
                    var _this = this;

                    this.elList = this.el.querySelector(this.options.classNameList);
                    this.arrSlide = this.el.querySelectorAll(this.options.classNameSlide);
                    this.elNavPrev = this.el.querySelector(this.options.classNamePrev);
                    this.elNavNext = this.el.querySelector(this.options.classNameNext);
                    this.elNavPrev.addEventListener('click', function () {
                        _this.prev();
                    });

                    this.elNavNext.addEventListener('click', function () {
                        _this.next();
                    });

                    win.addEventListener('resize', this._debounce(function () {
                        _this.elList.style.width = _this.arrSlide[0].offsetWidth * _this.arrSlide.length + 'px';
                        _this.showSilde(_this.currentSlide);
                    }), false);
                    win.addEventListener('orientationchange', function () {
                        _this.elList.style.width = _this.arrSlide[0].offsetWidth * _this.arrSlide.length + 'px';
                        _this.showSilde(_this.currentSlide);
                    }, false);

                    this.elList.style.width = this.arrSlide[0].offsetWidth * this.arrSlide.length + 'px';
                    this._makeNavList();
                }
            }, {
                key: 'prev',
                value: function prev() {
                    var width = this.arrSlide[0].offsetWidth;

                    if (this.currentSlide > 0) {
                        this.showSilde(this.currentSlide - 1);
                    } else {
                        this.showSilde(this.arrSlide.length - 1);
                    }

                    this.showSilde(this.currentSlide);
                }
            }, {
                key: 'next',
                value: function next() {
                    var width = this.arrSlide[0].offsetWidth;

                    if (this.currentSlide < this.arrSlide.length - 1) {
                        this.showSilde(this.currentSlide + 1);
                    } else {
                        this.showSilde(0);
                    }
                }
            }, {
                key: 'showSilde',
                value: function showSilde(num) {
                    this.currentSlide = num;
                    var len = this.arrSlide[0].offsetWidth * num;
                    this.elList.style.transform = 'translateX(-' + len + 'px)';
                    this._changeActeveEl();
                }
            }, {
                key: '_makeNavList',
                value: function _makeNavList() {
                    var _this2 = this;

                    var sliderNav = document.createElement('ul');
                    var arrNav = [];
                    sliderNav.className = this.options.classNameNav.substr(1);

                    var _loop = function _loop(item) {
                        var elItem = document.createElement('li');
                        var elLink = document.createElement('a');

                        elItem.className = _this2.options.classNameNavItem.substr(1);
                        elLink.className = _this2.options.classNameNavLink.substr(1);

                        if (_this2.currentSlide === item) {
                            elItem.classList.add(_this2.options.classNameNavItemActive.substr(1));
                        }

                        elItem.appendChild(elLink);

                        elLink.addEventListener('click', function () {
                            _this2.showSilde(item);
                        });

                        sliderNav.appendChild(elItem);
                    };

                    for (var item = 0; item < this.arrSlide.length; item++) {
                        _loop(item);
                    }

                    this.sliderNav = sliderNav;
                    this.el.appendChild(sliderNav);
                }
            }, {
                key: '_changeActeveEl',
                value: function _changeActeveEl() {
                    var i = 0;
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = this.sliderNav.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var item = _step.value;

                            if (i === this.currentSlide) {
                                item.classList.add(this.options.classNameNavItemActive.substr(1));
                                this.arrSlide[i].classList.add(this.options.classNameSlideActive.substr(1));
                            } else {
                                item.classList.remove(this.options.classNameNavItemActive.substr(1));
                                this.arrSlide[i].classList.remove(this.options.classNameSlideActive.substr(1));
                            }
                            i++;
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
            }, {
                key: '_debounce',
                value: function _debounce(func) {
                    var timeout = void 0;
                    return function () {
                        clearTimeout(timeout);
                        timeout = setTimeout(func, 200);
                    };
                }
            }]);

            return Slider;
        }();

        win.AVSlider = Slider;
    })(document, window);

    /********************************************* */

    ;(function (doc, win) {
        var Slider = function () {
            function Slider(el, options) {
                _classCallCheck(this, Slider);

                var optDefault = {
                    classNameList: '.slider__list',
                    classNameSlide: '.slider__item',
                    classNameSlideActive: '.slider__item--active',
                    classNamePrev: '.slider__left-arrow',
                    classNameNext: '.slider__right-arrow',
                    margin: 15,
                    minView: 510
                };

                this.options = Object.assign({}, optDefault, options);
                this.marginDefault = this.options.margin;

                this.el = el;
                this.currentSlide = 0;

                this._init();
            }

            _createClass(Slider, [{
                key: '_init',
                value: function _init() {
                    var _this3 = this;

                    this.elList = this.el.querySelector(this.options.classNameList);
                    this.arrSlide = this.el.querySelectorAll(this.options.classNameSlide);
                    this.elNavPrev = this.el.querySelector(this.options.classNamePrev);
                    this.elNavNext = this.el.querySelector(this.options.classNameNext);
                    this.elNavPrev.addEventListener('click', function (ev) {
                        ev.preventDefault();
                        _this3.prev();
                    });

                    this.elNavNext.addEventListener('click', function (ev) {
                        ev.preventDefault();
                        _this3.next();
                    });

                    win.addEventListener('resize', this._debounce(function () {
                        _this3.calcView();
                        _this3.showSilde(_this3.currentSlide);
                    }), false);
                    win.addEventListener('orientationchange', function () {
                        _this3.calcView();
                        _this3.showSilde(_this3.currentSlide);
                    }, false);

                    this._addEventSwipe();

                    this.calcView();
                }
            }, {
                key: 'calcView',
                value: function calcView() {
                    if (this.el.offsetWidth <= this.options.minView) {
                        this.marginDefault = this.options.margin;
                        this.opacityView = 1;
                        this.options.margin = (this.el.offsetWidth - this.arrSlide[0].offsetWidth) / 2;
                        this.listWidth = (this.options.margin * 2 + this.arrSlide[0].offsetWidth) * this.arrSlide.length;
                        this.maxTranslateX = this.listWidth - this.el.offsetWidth;
                        this.elList.style.width = this.listWidth + 'px';
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = this.arrSlide[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var item = _step2.value;

                                item.style.margin = '0 ' + this.options.margin + 'px';
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                    } else {
                        this.listWidth = (this.options.margin * 2 + this.arrSlide[0].offsetWidth) * this.arrSlide.length;
                        this.maxTranslateX = this.listWidth - this.el.offsetWidth;
                        this.elList.style.width = this.listWidth + 'px';
                        if (this.options.margin !== this.marginDefault) {
                            this.options.margin = this.marginDefault;
                            var _iteratorNormalCompletion3 = true;
                            var _didIteratorError3 = false;
                            var _iteratorError3 = undefined;

                            try {
                                for (var _iterator3 = this.arrSlide[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                    var _item = _step3.value;

                                    _item.style.margin = '0 ' + this.options.margin + 'px';
                                }
                            } catch (err) {
                                _didIteratorError3 = true;
                                _iteratorError3 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                        _iterator3.return();
                                    }
                                } finally {
                                    if (_didIteratorError3) {
                                        throw _iteratorError3;
                                    }
                                }
                            }
                        }

                        this.opacityView = Math.floor(this.el.offsetWidth / (this.arrSlide[0].offsetWidth + this.options.margin * 2));
                    }
                }
            }, {
                key: 'prev',
                value: function prev() {
                    if (this.currentSlide > 0) {
                        this.showSilde(this.currentSlide - 1);
                    } else {
                        this.showSilde(this.arrSlide.length - this.opacityView);
                    }
                }
            }, {
                key: 'next',
                value: function next() {
                    if (this.currentSlide < this.arrSlide.length - this.opacityView) {
                        this.showSilde(this.currentSlide + 1);
                    } else {
                        this.showSilde(0);
                    }
                }
            }, {
                key: 'showSilde',
                value: function showSilde(num) {
                    this.currentSlide = num;
                    var len = (this.arrSlide[0].offsetWidth + (num ? this.options.margin * 2 : 0)) * num;
                    this._swipe.translateX = len;
                    this.elList.style.transform = 'translateX(-' + len + 'px)';
                }
            }, {
                key: '_debounce',
                value: function _debounce(func) {
                    var timeout = void 0;
                    return function () {
                        clearTimeout(timeout);
                        timeout = setTimeout(func, 200);
                    };
                }
            }, {
                key: '_addEventSwipe',
                value: function _addEventSwipe() {
                    var _this4 = this;

                    this._swipe = {
                        started: false,
                        detecting: false,
                        touch: null,
                        x: 0,
                        y: 0,
                        delta: 0,
                        prevDelta: 0,
                        newX: 0,
                        newY: 0,
                        translateX: 0
                    };

                    this.elList.addEventListener('touchstart', function (ev) {
                        _this4._swipeStart(ev);
                    });
                    this.elList.addEventListener('touchmove', function (ev) {
                        _this4._swipeMove(ev);
                    });
                    this.elList.addEventListener('touchend', function (ev) {
                        _this4._swipeEnd(ev);
                    });
                    this.elList.addEventListener('touchcancel', function (ev) {
                        _this4._swipeEnd(ev);
                    });
                }
            }, {
                key: '_swipeStart',
                value: function _swipeStart(ev) {
                    this.elList.classList.remove('posts__list--animation');
                    if (ev.touches.length != 1 || this._swipe.started) {
                        this.elList.classList.add('posts__list--animation');
                        return;
                    }

                    this._swipe.detecting = true;
                    this._swipe.touch = ev.changedTouches[0];
                    this._swipe.x = this._swipe.touch.pageX;
                    this._swipe.y = this._swipe.touch.pageY;
                }
            }, {
                key: '_swipeMove',
                value: function _swipeMove(ev) {
                    if (!this._swipe.started && !this._swipe.detecting) {
                        return;
                    }
                    this._swipe.newX = ev.changedTouches[0].pageX;
                    this._swipe.newY = ev.changedTouches[0].pageY;

                    if (this._swipe.detecting) {
                        this._swipeDetect(ev);
                    }

                    if (this._swipe.started) {
                        this._swipeDraw(ev);
                    }
                }
            }, {
                key: '_swipeEnd',
                value: function _swipeEnd(ev) {
                    var swipeTo = void 0;

                    this.elList.classList.add('posts__list--animation');

                    if (this._isItTouch(ev) || !this._swipe.started) {
                        return;
                    }

                    ev.preventDefault();
                    this._swipe.started = false;

                    swipeTo = this._swipe.delta < 0 ? 'left' : 'right';

                    this._swipeTo();
                    this._swipe.prevDelta = 0;
                }
            }, {
                key: '_swipeDetect',
                value: function _swipeDetect(ev) {
                    if (this._isItTouch(ev)) {
                        return;
                    }

                    if (Math.abs(this._swipe.x - this._swipe.newX) >= Math.abs(this._swipe.y - this._swipe.newY)) {
                        ev.preventDefault();
                        this._swipe.started = true;
                    }

                    this._swipe.detecting = false;
                }
            }, {
                key: '_swipeDraw',
                value: function _swipeDraw(ev) {
                    var dX = void 0;

                    ev.preventDefault();

                    if (this._isItTouch(ev)) {
                        return;
                    }

                    this._swipe.delta = this._swipe.x - this._swipe.newX;
                    dX = this._swipe.delta - this._swipe.prevDelta;
                    this._swipe.prevDelta = this._swipe.delta;

                    if (this._swipe.delta < 0 && this._swipe.translateX <= 0 || this._swipe.delta > 0 && this.maxTranslateX <= this._swipe.translateX) {
                        dX = dX / 5;
                    }

                    this._moveTo(dX);
                }
            }, {
                key: '_isItTouch',
                value: function _isItTouch(ev) {
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                        for (var _iterator4 = ev.changedTouches[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var touch = _step4.value;

                            if (touch === this._swipe.touch) return true;
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4;
                            }
                        }
                    }

                    return false;
                }
            }, {
                key: '_moveTo',
                value: function _moveTo(dX) {
                    var len = void 0;
                    //this._swipe.translateX = this._swipe.currentSwipe + this._swipe.delta;
                    this._swipe.translateX += dX;
                    len = this._swipe.translateX * -1;
                    this.elList.style.transform = 'translateX(' + len + 'px)';
                }
            }, {
                key: '_swipeTo',
                value: function _swipeTo() {
                    var count = void 0;
                    if (this._swipe.translateX < 0) {
                        this._swipe.translateX = 0;
                        this.showSilde(0);
                    } else if (this._swipe.translateX > this.maxTranslateX) {
                        this._swipe.translateX = this.maxTranslateX;
                        this.showSilde(this.arrSlide.length - this.opacityView);
                    } else {
                        if (this._swipe.delta < 0) {
                            count = Math.floor(this._swipe.translateX / (this.arrSlide[0].offsetWidth + this.options.margin * 2));
                        } else {
                            count = Math.ceil(this._swipe.translateX / (this.arrSlide[0].offsetWidth + this.options.margin * 2));
                        }

                        this.showSilde(count);
                    }
                }
            }]);

            return Slider;
        }();

        win.AVASlider = Slider;
    })(document, window);

    var elSlider = document.querySelector('.slider');
    var slider = new AVSlider(elSlider);
    var elSlider2 = document.querySelector('.posts__content');
    var slider2 = new AVASlider(elSlider2, {
        classNameList: '.posts__list',
        classNameSlide: '.posts__item',
        classNameSlideActive: '.posts__item--active',
        classNamePrev: '.posts__nav-link--left',
        classNameNext: '.posts__nav-link--right',
        sliderNav: false,
        minView: 510
    });

    btnNav.addEventListener('click', function (ev) {
        btnNav.classList.toggle('is-active');

        if (btnNav.classList.contains('is-active')) {
            nav.classList.add('nav--open');
            header.classList.add('header--dark');
        } else {
            nav.classList.remove('nav--open');
            header.classList.remove('header--dark');
        }
    });

    document.addEventListener("scroll", function (ev) {
        var scrollTop = self.pageYOffset || document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop;

        if (scrollTop >= Math.max(window.innerHeight, 530)) {
            if (!header.classList.contains('header--fixed')) header.classList.add('header--fixed');
        } else {
            header.classList.remove('header--fixed');
        }
    });

    if (canvas.getContext) {
        drawPlay(canvas, 0.95);
        canvas.addEventListener('click', play);
        canvas.addEventListener('mousemove', function (ev) {
            ev.stopPropagation();
        });
    }
    videoCont.addEventListener('mousemove', function (ev) {

        if (videoCont.classList.contains('video--open')) {
            videoCont.classList.remove('video--clear');

            if (!ev.target.classList.contains('video__desc') || !ev.target.classList.contains('video__canvas')) {
                clearTimeout(timerId);
                timerId = setTimeout(function () {
                    videoCont.classList.add('video--clear');
                }, 1500);
            }
        }
    });
    video.load();
    video.addEventListener('loadedmetadata', function () {
        var min = Math.round(video.duration / 60);
        var sec = Math.round(video.duration % 60);
        if (min < 10) min = '0' + min;
        if (sec < 10) sec = '0' + sec;
        videoTime.innerText = min + ':' + sec;
    });
    video.addEventListener('timeupdate', function () {
        var min = Math.floor((video.duration - video.currentTime) / 60);
        var sec = Math.round((video.duration - video.currentTime) % 60);
        if (min < 10) min = '0' + min;
        if (sec < 10) sec = '0' + sec;
        videoTime.innerText = min + ':' + sec;
    });

    function play() {
        if (video.paused) {
            videoCont.classList.add('video--open');
            setTimeout(function () {
                videoCont.classList.add('video--clear');
            }, 1500);
            drawPause(canvas);
            video.play();
        } else {
            videoCont.classList.remove('video--clear');
            video.pause();
            drawPlay(canvas, 0.95);
        }
    }

    function drawPlay(canvas, x) {
        var ctx = canvas.getContext('2d');

        ctx.clearRect(0, 0, 100, 100);

        ctx.beginPath();
        ctx.fillStyle = "rgba(17,17,17,0.5)";
        ctx.arc(50, 50, 50, 0, Math.PI * 2, true);
        ctx.fill();

        ctx.strokeStyle = "#fff";
        ctx.lineWidth = "5";
        ctx.lineCap = "round";

        if (x > 0) {
            ctx.beginPath();
            ctx.arc(50, 50, 40, Math.PI / 180 * 135, Math.PI / 180 * (135 + 360 * x), false);
            ctx.stroke();
        }

        ctx.beginPath();
        ctx.lineWidth = "5";
        ctx.lineJoin = "round";
        ctx.moveTo(44, 35);
        ctx.lineTo(60, 50);
        ctx.lineTo(44, 65);
        ctx.closePath();
        ctx.stroke();
    }

    function drawPause(canvas) {
        var ctx = canvas.getContext('2d');

        ctx.clearRect(0, 0, 100, 100);

        ctx.beginPath();
        ctx.fillStyle = "rgba(17,17,17,0.5)";
        ctx.arc(50, 50, 50, 0, Math.PI * 2, true);
        ctx.fill();

        ctx.strokeStyle = "#fff";
        ctx.lineWidth = "5";
        ctx.lineCap = "round";
        /*
                ctx.beginPath();
                ctx.arc(50, 50, 40, (Math.PI / 180) * 135, (Math.PI / 180) * (135 + 360 * 0.95), false);
                ctx.stroke();
        */
        ctx.beginPath();
        ctx.lineWidth = "5";
        ctx.lineJoin = "round";
        ctx.moveTo(42, 35);
        ctx.lineTo(42, 65);
        ctx.moveTo(58, 35);
        ctx.lineTo(58, 65);
        ctx.stroke();
    }
};